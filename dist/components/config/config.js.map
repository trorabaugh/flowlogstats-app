{"version":3,"sources":["../../../src/components/config/config.js"],"names":[],"mappings":"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","file":"config.js","sourcesContent":["import configTemplate from './config.html!text';\n\nimport _ from 'lodash' ;\n\nclass FlowLogStatsConfigCtrl {\n  constructor($scope, $injector, backendSrv) {\n    this.backendSrv = backendSrv;\n    this.validKey = true;\n    // FIX should be false\n    this.quotas = {};\n    // Needs to be fixed to use API keys\n    // this.appEditCtrl.setPreUpdateHook(this.preUpdate.bind(this));\n    // this.appEditCtrl.setPostUpdateHook(this.postUpdate.bind(this));\n/*\n\tthis.appEditCtrl.importDashboards().then(() => {\n        return {\n          url: \"dashboard/db/flowlogstats-home\",\n          message: \"FlowLogStats app installed!\"\n        };\n      });\n*/\n    if (this.appModel.jsonData === null) {\n      this.appModel.jsonData = {};\n    }\n    if (!this.appModel.secureJsonData) {\n      this.appModel.secureJsonData = {};\n    }\n    // if (this.appModel.enabled) {\n    // FIX Should check for valid key\n    // this.validateKey();\n    // }\n  }\n\n  validateKey() {\n    var self = this;\n    var p = this.backendSrv.get('api/plugin-proxy/flowlogstats-app/api/org/quotas');\n    p.then((quotas) => {\n      self.validKey = true;\n      self.quotas = quotas;\n    }, () => {\n      if (self.appModel.enabled) {\n        self.appModel.jsonData.apiKeySet = false;\n        self.appModel.secureJsonData.apiKey = \"\";\n        self.errorMsg = \"invlid apiKey\";\n      }\n    });\n    return p;\n  }\n\n  preUpdate() {\n    var model = this.appModel;\n    if (!model.enabled) {\n      return Promise.resolve();\n    }\n\n    if (!model.jsonData.apiKeySet && !model.secureJsonData.apiKey) {\n      model.enabled = false;\n      return Promise.reject(\"apiKey not set.\");\n    }\n\t// if the apiKey is being set, check and make sure that\n\t// we have initialized our datasource and dashboards.\n    if (model.secureJsonData.apiKey) {\n      model.jsonData.apiKeySet = true;\n\n      if (!model.jsonData.datasourceSet) {\n        var p = this.initDatasource();\n        p.then(() => {\n          model.jsonData.datasourceSet = true;\n        });\n        return p;\n      }\n    }\n\n    return Promise.resolve();\n  }\n\n  postUpdate() {\n    if (!this.appModel.enabled) {\n      return Promise.resolve();\n    }\n    var self = this;\n    return this.validateKey()\n    .then(() => {\n      return self.appEditCtrl.importDashboards().then(() => {\n        return {\n          url: \"dashboard/db/flowlogstats-home\",\n          message: \"FlowLogStats app installed!\"\n        };\n      });\n    });\n  }\n\n  configureDatasource() {\n    this.appModel.jsonData.datasourceSet = false;\n    this.initDatasource().then(() => {\n      this.appModel.jsonData.datasourceSet = true;\n    });\n  }\n\n  initDatasource() {\n    var self = this;\n\t//check for existing datasource.\n    var p = self.backendSrv.get('/api/datasources');\n    p.then(function(results) {\n      var foundGraphite = false;\n      var foundElastic = false;\n      _.forEach(results, function(ds) {\n        if (foundGraphite && foundElastic) { return; }\n        if (ds.name === \"raintank\") {\n          foundGraphite = true;\n        }\n        if (ds.name === \"raintankEvents\") {\n          foundElastic = true;\n        }\n      });\n      var promises = [];\n      if (!foundGraphite) {\n        // create datasource.\n        var graphite = {\n          name: 'raintank',\n          type: 'graphite',\n          url: 'api/plugin-proxy/flowlogstats-app/api/graphite',\n          access: 'direct',\n          jsonData: {}\n        };\n        promises.push(self.backendSrv.post('/api/datasources', graphite));\n      }\n      if (!foundElastic) {\n        // create datasource.\n        var elastic = {\n          name: 'raintankEvents',\n          type: 'elasticsearch',\n          url: 'api/plugin-proxy/flowlogstats-app/api/elasticsearch',\n          access: 'direct',\n          database: '[events-]YYYY-MM-DD',\n          jsonData: {\n            esVersion: 1,\n            interval: \"Daily\",\n            timeField: \"timestamp\"\n          }\n        };\n        promises.push(self.backendSrv.post('/api/datasources', elastic));\n      }\n      return Promise.all(promises);\n    });\n    return p;\n  }\n}\n\nFlowLogStatsConfigCtrl.template = configTemplate;\n\nexport {\n  FlowLogStatsConfigCtrl as ConfigCtrl\n};\n"]}